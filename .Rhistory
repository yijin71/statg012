contour <- function(x,y,z, xlab = "mu", ylab="tau",xlim = range(l.mu:u.mu) ,
ylim = range(l.tau:u.tau),..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len,lend, add, verbose, type){
graphics::contour(x, y, z, xlab = xlab, ylab = ylab,xlim = xlim, ylim = ylim,...)
}
my_legend3 <- function(pos, lty = 1, lwd = 1, col = 1,
legend = c("prior contour"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type,nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
if(which == "1") {
par(mfrow=c(2,1))
my_matplot(x, y, ...)
my_legend(leg_pos, ...)
my_matplot2(xx, yy, ...)
my_legend2(leg_pos, ...)
}
if (which == "2") {
par(mfrow=c(1,1))
contour(mu, tau, outer(mu.prior,tau.prior),...)
my_legend3(leg_pos, ...)
}
} else {
res <- x
mu.prior <- res$prior
posterior <- res$posterior
mu <- res$mu
x <- cbind(mu, mu)
x <- mu
y <- cbind(mu.prior, posterior)
#
leg_pos <- match.arg(leg_pos)
user_args <- list(...)
#
my_matplot <- function(xx, yy, lty = 1:2, col = 1, type = "l",
xlab = "mu",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend <- function(pos, lty = 1:2, lwd = 1, col = 1,
legend = c("mu.prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
par(mfrow= c(1,1))
my_matplot(x, y, ...)
my_legend(leg_pos, ...)
}
}
plot.noraml(exmp2)
plot.noraml(exmp2, which ="2")
plot.noraml(exmp2, which = "2")
?plot.lm
list(plot.lm)
list(plot)
library(statg012)
View(plot.noraml)
View(plot.normal)
View(plot.noraml)
View(plot.noraml)
View(plot.noraml)
#'plot of normal
#'
#'plot of normal
#'
#'@examples
#'##plot example5.6
#'x <- rnorm(9, sd = 2)
#'xx <- x- mean(x) + 20
#'exmp1 <- normal(xx, m = 25, s = sqrt(10), sigma = 2)
#'plot.normal(exmp1)
#'
#'## if mu and sigma  are unknown
#'exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
#'plot.normal(exmp2)
#'
#'@export plot.normal
plot.normal <- function (x, y, leg_pos = c("topright", "bottomright",
"bottom", "bottomleft",
"left", "topleft",
"top", "right", "center"),...) {
if(length(x) > 8) {
res <- x
mu <- res$mu
l.mu <- quantile(mu,l.mu)
u.mu <- quantile(mu,u.mu)
mu.prior <- res$mu.prior
tau <- res$tau
l.tau <- quantile(tau,l.tau)
u.tau <- quantile(tau,u.tau)
tau.prior <-res$tau.prior
prior <- res$prior
posterior <- res$posterior
x <- cbind(mu, mu, mu)
x <- mu
y <- cbind(mu.prior, prior, posterior)
xx <- cbind(tau,tau,tau)
xx <- tau
yy <- cbind(tau.prior, prior, posterior)
#
leg_pos <- match.arg(leg_pos)
user_args <- list(...)
#
my_matplot <- function(xx, yy, lty = 1:3, col = 1, type = "l",
xlab = "mu",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len, nlevels, levels, labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend <- function(pos, lty = 1:3, lwd = 1, col = 1,
legend = c("mu.prior","prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type, nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
my_matplot2 <- function(xx, yy, lty = 1:3, col = 1, type = "l",
xlab = "tau",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len,nlevels, levels, labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend2 <- function(pos, lty = 1:3, lwd = 1, col = 1,
legend = c("tau.prior","prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type,nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
contour <- function(x,y,z, xlab = "mu", ylab="tau",xlim = range(l.mu:u.mu) ,
ylim = range(l.tau:u.tau),..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len,lend, add, verbose, type){
graphics::contour(x, y, z, xlab = xlab, ylab = ylab,xlim = xlim, ylim = ylim,...)
}
my_legend3 <- function(pos, lty = 1, lwd = 1, col = 1,
legend = c("prior contour"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type,nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
if(which == "1") {
par(mfrow=c(2,1))
my_matplot(x, y, ...)
my_legend(leg_pos, ...)
my_matplot2(xx, yy, ...)
my_legend2(leg_pos, ...)
}
if (which == "2") {
par(mfrow=c(1,1))
contour(mu, tau, outer(mu.prior,tau.prior),...)
my_legend3(leg_pos, ...)
}
} else {
res <- x
mu.prior <- res$prior
posterior <- res$posterior
mu <- res$mu
x <- cbind(mu, mu)
x <- mu
y <- cbind(mu.prior, posterior)
#
leg_pos <- match.arg(leg_pos)
user_args <- list(...)
#
my_matplot <- function(xx, yy, lty = 1:2, col = 1, type = "l",
xlab = "mu",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend <- function(pos, lty = 1:2, lwd = 1, col = 1,
legend = c("mu.prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
par(mfrow= c(1,1))
my_matplot(x, y, ...)
my_legend(leg_pos, ...)
}
}
x <- rnorm(9, sd = 2)
xx <- x- mean(x) + 20
exmp1 <- normal(xx, m = 25, s = sqrt(10), sigma = 2)
plot.normal(exmp1)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2)
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2)
plot.normal(exmp2)
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2)
library(statg012)
View(plot.normal)
#'plot of normal
#'
#'plot of normal
#'
#'@examples
#'##plot example5.6
#'x <- rnorm(9, sd = 2)
#'xx <- x- mean(x) + 20
#'exmp1 <- normal(xx, m = 25, s = sqrt(10), sigma = 2)
#'plot.normal(exmp1)
#'
#'## if mu and sigma  are unknown
#'exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
#'plot.normal(exmp2)
#'
#'@export plot.normal
plot.normal <- function (x, y, leg_pos = c("topright", "bottomright",
"bottom", "bottomleft",
"left", "topleft",
"top", "right", "center"), which = "", ...) {
if(length(x) > 8) {
res <- x
mu <- res$mu
#l.mu <- quantile(mu,l.mu)
#u.mu <- quantile(mu,u.mu)
mu.prior <- res$mu.prior
tau <- res$tau
#l.tau <- quantile(tau,l.tau)
#u.tau <- quantile(tau,u.tau)
tau.prior <-res$tau.prior
prior <- res$prior
posterior <- res$posterior
x <- cbind(mu, mu, mu)
x <- mu
y <- cbind(mu.prior, prior, posterior)
xx <- cbind(tau,tau,tau)
xx <- tau
yy <- cbind(tau.prior, prior, posterior)
#
leg_pos <- match.arg(leg_pos)
user_args <- list(...)
#
my_matplot <- function(xx, yy, lty = 1:3, col = 1, type = "l",
xlab = "mu",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len, nlevels, levels, labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend <- function(pos, lty = 1:3, lwd = 1, col = 1,
legend = c("mu.prior","prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type, nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
my_matplot2 <- function(xx, yy, lty = 1:3, col = 1, type = "l",
xlab = "tau",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len,nlevels, levels, labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend2 <- function(pos, lty = 1:3, lwd = 1, col = 1,
legend = c("tau.prior","prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type,nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
contour <- function(x,y,z, xlab = "mu", ylab="tau",
#xlim = range(l.mu:u.mu) ,
#ylim = range(l.tau:u.tau),
..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len,lend, add, verbose, type){
graphics::contour(x, y, z, xlab = xlab, ylab = ylab,
#xlim = xlim, ylim = ylim,
...)
}
my_legend3 <- function(pos, lty = 1, lwd = 1, col = 1,
legend = c("prior contour"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type,nlevels, levels,
labels, labcex, drawlabels,
method, vfont, frame.plot, zlim) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
if(which == "1") {
par(mfrow=c(2,1))
my_matplot(x, y, ...)
my_legend(leg_pos, ...)
my_matplot2(xx, yy, ...)
my_legend2(leg_pos, ...)
}
if (which == "2") {
par(mfrow=c(1,1))
contour(mu, tau, outer(mu.prior,tau.prior),...)
my_legend3(leg_pos, ...)
}
} else {
res <- x
mu.prior <- res$prior
posterior <- res$posterior
mu <- res$mu
x <- cbind(mu, mu)
x <- mu
y <- cbind(mu.prior, posterior)
#
leg_pos <- match.arg(leg_pos)
user_args <- list(...)
#
my_matplot <- function(xx, yy, lty = 1:2, col = 1, type = "l",
xlab = "mu",ylab = "density", ..., legend, fill,
border, angle, density, box.lwd, box.lty, box.col,
pt.bg, pt.cex, pt.lwd, xjust, yjust, x.intersp,
y.intersp, adj, text.width, text.col, text.font,
merge, trace, ncol, horiz, inset, title.col,
title.adj, seg.len) {
graphics::matplot(xx, yy, col = col, xlab = xlab, ylab = ylab,
type = type, lty = lty, ...)
}
my_legend <- function(pos, lty = 1:2, lwd = 1, col = 1,
legend = c("mu.prior", "posterior"), ..., xlab, ylab,
lend, xlim, ylim, add, verbose, type) {
graphics::legend(pos, lty = lty, lwd = lwd, col = col, legend = legend,
...)
}
par(mfrow= c(1,1))
my_matplot(x, y, ...)
my_legend(leg_pos, ...)
}
}
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
xx <- x- mean(x) + 20
x <- rnorm(9, sd = 2)
xx <- x- mean(x) + 20
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2)
plot.normal(exmp2,which = "2")
library(statg012)
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2,which = "2")
plot.normal(exmp2,which = "2")
plot.normal(exmp2,which = "1")
plot.normal(exmp2,which = "1",cex = 0.3)
exmp1 <- normal(xx, m = 25, s = sqrt(10), sigma = 2)
plot.normal(exmp1)
View(plot.normal)
View(plot.normal)
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2,which = "2")
plot.normal(exmp2,which = "2", l.mu = 0.4, u.tau= 0.6)
plot.normal(exmp2,which = "2", l.mu = 0.4, l.tau = 0.4, u.mu =0.99, u.tau= 0.6)
warnings()
library(statg012)
plot.normal(exmp2,which = "2", l.mu = 0.4, l.tau = 0.4, u.mu =0.99, u.tau= 0.6)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2,which = "2", l.mu = 0.4, l.tau = 0.4, u.mu =0.99, u.tau= 0.6)
library(statg012)
plot.normal(exmp2,which = "2", l.mu = 0.4, l.tau = 0.4, u.mu =0.99, u.tau= 0.6)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2,which = "2")
library(statg012)
plot.normal(exmp2,which = "2")
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2,which = "2", l.mu = 0.4, l.tau = 0.4, u.mu =0.99, u.tau= 0.6)
plot.normal(exmp2,which = "2")
library(statg012)
plot.normal(exmp2,which = "2")
plot.normal(exmp2,which = "1")
plot.normal(exmp2,which = "2")
plot.normal(exmp2, which = "1", xlim = range(16:32))
plot.normal(exmp2, which = "2", xlim = range(16:32))
plot.normal(exmp2, which = "2", xlim = range(16:32), ylim = range(0:10))
plot.normal(exmp2, which = "1", xlim = 10)
plot.normal(exmp2, which = "1", xlim = range(0:10))
plot.normal(exmp2, which = "1")
plot.normal(exmp2, which = "2", xlim =range(16:32), ylim =range(0:10))
plot.normal(exmp2, which = "2", xlim =range(16:32), ylim =range(0:10), main =" contor ")
?legend
plot.normal(exmp2, which = "2", xlim =range(16:32), ylim =range(0:10), title =" contor ")
?matplot
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
warning()
warnings()
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2, which = "2", xlim =range(16:32), ylim =range(0:10), title =" contor ")
plot.normal(exmp2, which = "2", xlim =range(16:32), ylim =range(0:10), main =" contor ")
plot.normal(exmp2, which = "1", main =" contor ")
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2, which = "1", main =" contor ")
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2, which = "1", main =" contor ")
x <- binbeta(4,6,10,3)
plot(x)
plot(x, model = "binbeta")
plot(x, model = "binbeta", title = "distribution")
plot(x, model = "binbeta", main = "distribution")
x <- rnorm(16,sd =2)
x <- rnorm(16,sd =2)
xx <- x-mean(x)+5.2
xx
mean(xx)
a <- normal(xx,m=4.5,s=sqrt(10),sigma = 2)
normal_test <- function(x, theta, a, b) {
res <-x
pos.mean <- res$pos.mean
pos.var <- res$pos.var
p1 <- abs(pos.mean - theta) / sqrt(pos.var)
p2 <- 1 -p1
pos.loss1 <- p1 * a
pos.loss2 <- p2 * b
if (pos.loss1 < =  pos.loss2) {
cat(paste("We reject H0 and the expected posterior loss is :", pos.loss1))
}
if (pos.loss1 > pos.loss2) {
cat(paste("We accept H0 and the expected posterior loss is :", pos.loss2))
}
}
normal_test <- function(x, theta, a, b) {
res <-x
pos.mean <- res$pos.mean
pos.var <- res$pos.var
p1 <- abs(pos.mean - theta) / sqrt(pos.var)
p2 <- 1 -p1
pos.loss1 <- p1 * a
pos.loss2 <- p2 * b
if (pos.loss1 < ==  pos.loss2) {
cat(paste("We reject H0 and the expected posterior loss is :", pos.loss1))
}
if (pos.loss1 > pos.loss2) {
cat(paste("We accept H0 and the expected posterior loss is :", pos.loss2))
}
}
normal_test <- function(x, theta, a, b) {
res <-x
pos.mean <- res$pos.mean
pos.var <- res$pos.var
p1 <- abs(pos.mean - theta) / sqrt(pos.var)
p2 <- 1 -p1
pos.loss1 <- p1 * a
pos.loss2 <- p2 * b
if (pos.loss1 <=  pos.loss2) {
cat(paste("We reject H0 and the expected posterior loss is :", pos.loss1))
}
if (pos.loss1 > pos.loss2) {
cat(paste("We accept H0 and the expected posterior loss is :", pos.loss2))
}
}
a <- normal(xx, m = 25, s = sqrt(10), sigma = 2)
normal_test(a, theta = 5, a = 1, b =2)
library(statg012)
a <- normal(xx, m = 25, s = sqrt(10), sigma = 2)
normaltest(a, theta = 5, a = 1, b =2)
library(statg012)
normaltest(a, theta = 5, a = 1, b =2)
library(statg012)
exmp2 <- normal(xx,m = 25, s = sqrt(10), a = 4, b = 1)
plot.normal(exmp2, which = "2", xlim =range(16:32), ylim =range(0:10))
plot.normal(exmp2, which = "1")
plot.normal(exmp2, which = "1", main = " distribution")
library(statg012)
